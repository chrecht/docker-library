name: nginx 1.29

on:
  push:
    tags:
      - "v1.29.*"
  workflow_dispatch:

env:
  NGINX_MAJOR_VERSION: 1.29
  NGINX_TAG: mainline

jobs:

  latest-version:
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      MAJOR: ${{ steps.get_version.outputs.MAJOR }}
      MINOR: ${{ steps.get_version.outputs.MINOR }}
      PATCH: ${{ steps.get_version.outputs.PATCH }}
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: get_version
        run: |
          latest=$(curl -s "https://hub.docker.com/v2/repositories/library/nginx/tags?page_size=1000&name=${NGINX_MAJOR_VERSION}." | jq -r '.results[].name' | grep -E "^${NGINX_MAJOR_VERSION}.[0-9]+$" | sort -V | tail -1)
          ver_major=$(echo $latest | sed -En 's/^([0-9]+)\.[0-9]+\.[0-9]+/\1/p')
          ver_minor=$(echo $latest | sed -En 's/^[0-9]+\.([0-9]+)\.[0-9]+/\1/p')
          ver_patch=$(echo $latest | sed -En 's/^[0-9]+\.[0-9]+\.([0-9]+)/\1/p')

          echo "VERSION=$latest" >> $GITHUB_OUTPUT
          echo "MAJOR=$ver_major" >> $GITHUB_OUTPUT
          echo "MINOR=$ver_minor" >> $GITHUB_OUTPUT
          echo "PATCH=$ver_patch" >> $GITHUB_OUTPUT

  build:

    needs: latest-version

    strategy:
      matrix:
        arch: ["amd64", "arm64"]

    runs-on: ubuntu-latest
    
    env:
      VERSION: ${{ needs.latest-version.outputs.VERSION }}
      MAJOR: ${{ needs.latest-version.outputs.MAJOR }}
      MINOR: ${{ needs.latest-version.outputs.MINOR }}
      PATCH: ${{ needs.latest-version.outputs.PATCH }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.REGISTRY1_BASE }}nginx
            ${{ secrets.REGISTRY2_BASE }}nginx
          tags: |
            type=raw,value=${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}-${{ matrix.arch }}
          flavor: |
            latest=false

      - name: Login to Registry 1
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY1_HOSTNAME }}
          username: ${{ secrets.REGISTRY1_USERNAME }}
          password: ${{ secrets.REGISTRY1_PASSWORD }}


      - name: Login to Registry 2
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY2_HOSTNAME }}
          username: ${{ secrets.REGISTRY2_USERNAME }}
          password: ${{ secrets.REGISTRY2_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/${{ matrix.arch }}
          context: ./nginx/${{ env.NGINX_MAJOR_VERSION }}
          file: ./nginx/${{ env.NGINX_MAJOR_VERSION }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.repository }}-${{ github.ref_name }}-nginx-${{ env.VERSION }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ github.ref_name }}-nginx-${{ env.VERSION }}-${{ matrix.arch }}



  create-multiarch-manifests:
    needs: ["latest-version", "build"]

    runs-on: ubuntu-latest

    env:
      MAJOR: ${{ needs.latest-version.outputs.MAJOR }}
      MINOR: ${{ needs.latest-version.outputs.MINOR }}
      PATCH: ${{ needs.latest-version.outputs.PATCH }}

    defaults:
      run:
        shell: bash

    steps:

      - name: Login to Registry 1
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY1_HOSTNAME }}
          username: ${{ secrets.REGISTRY1_USERNAME }}
          password: ${{ secrets.REGISTRY1_PASSWORD }}


      - name: Login to Registry 2
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY2_HOSTNAME }}
          username: ${{ secrets.REGISTRY2_USERNAME }}
          password: ${{ secrets.REGISTRY2_PASSWORD }}

      - name: Create multiarch manifests - registry 1
        run: |
          docker buildx imagetools create \
            -t ${{ secrets.REGISTRY1_BASE }}nginx:${{ env.NGINX_TAG }} \
            -t ${{ secrets.REGISTRY1_BASE }}nginx:${{ env.MAJOR }} \
            -t ${{ secrets.REGISTRY1_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }} \
            -t ${{ secrets.REGISTRY1_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            ${{ secrets.REGISTRY1_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}-amd64 \
            ${{ secrets.REGISTRY1_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}-arm64

      - name: Create multiarch manifests - registry 2
        run: |
          docker buildx imagetools create \
            -t ${{ secrets.REGISTRY2_BASE }}nginx:${{ env.NGINX_TAG }} \
            -t ${{ secrets.REGISTRY2_BASE }}nginx:${{ env.MAJOR }} \
            -t ${{ secrets.REGISTRY2_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }} \
            -t ${{ secrets.REGISTRY2_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }} \
            ${{ secrets.REGISTRY2_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}-amd64 \
            ${{ secrets.REGISTRY2_BASE }}nginx:${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}-arm64
